{"ast":null,"code":"var _jsxFileName = \"/Users/charupatelbaghi/ares-elite/src/components/layout/DoctorSelectUser.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DoctorSelectUser = () => {\n  _s();\n  const [selectedUserType, setSelectedUserType] = useState(\"\");\n  const navigate = useNavigate();\n  const handleSubmit = () => {\n    alert(selectedUserType);\n    if (selectedUserType === \"New\") {\n      navigate(\"/doctor/dashboard/doctor-service-selection\");\n    } else if (selectedUserType === \"Existing\") {\n      // Open the modal for existing user verification\n      // You should have a function to handle modal opening in your code\n      // For example, openModal('Title', 'Footer');\n      console.log(\"modal opened for verification\");\n    }\n  };\n  const handleUserTypeChange = userType => {\n    setSelectedUserType(userType);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"text-center d-flex flex-column justify-content-center align-items-center \",\n      style: {\n        gap: \"24px\",\n        width: \"40%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/images/areseliteLogo.png\",\n        width: 100,\n        alt: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Please select Type of user\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex flex-wrap justify-content-center \",\n        style: {\n          gap: \"24px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `doctor-user-type ${selectedUserType === \"New\" ? \"selected\" : \"\"}`,\n          onClick: () => handleUserTypeChange(\"New\"),\n          children: \"New\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `doctor-user-type ${selectedUserType === \"Existing\" ? \"selected\" : \"\"}`,\n          onClick: () => handleUserTypeChange(\"Existing\"),\n          children: \"Existing\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleSubmit,\n        className: \"purple-button \",\n        style: {\n          width: \"332px\",\n          height: \"62px\"\n        },\n        children: \"Continue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(DoctorSelectUser, \"y1Ayxzkm+9ECS+sI60LWkZ/b7Qw=\", false, function () {\n  return [useNavigate];\n});\n_c = DoctorSelectUser;\nexport default DoctorSelectUser;\nvar _c;\n$RefreshReg$(_c, \"DoctorSelectUser\");","map":{"version":3,"names":["React","useState","Button","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","DoctorSelectUser","_s","selectedUserType","setSelectedUserType","navigate","handleSubmit","alert","console","log","handleUserTypeChange","userType","children","className","style","gap","width","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","height","_c","$RefreshReg$"],"sources":["/Users/charupatelbaghi/ares-elite/src/components/layout/DoctorSelectUser.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst DoctorSelectUser = () => {\n  const [selectedUserType, setSelectedUserType] = useState(\"\");\n  const navigate = useNavigate();\n  const handleSubmit = () => {\n    alert(selectedUserType);\n    if (selectedUserType === \"New\") {\n      navigate(\"/doctor/dashboard/doctor-service-selection\");\n    } else if (selectedUserType === \"Existing\") {\n      // Open the modal for existing user verification\n      // You should have a function to handle modal opening in your code\n      // For example, openModal('Title', 'Footer');\n      console.log(\"modal opened for verification\");\n    }\n  };\n  const handleUserTypeChange = (userType) => {\n    setSelectedUserType(userType);\n  };\n  return (\n    <>\n      <section\n        className=\"text-center d-flex flex-column justify-content-center align-items-center \"\n        style={{ gap: \"24px\", width: \"40%\" }}\n      >\n        <img src=\"/images/areseliteLogo.png\" width={100} alt=\"logo\" />\n        <h5>Please select Type of user</h5>\n\n        <div\n          className=\"d-flex flex-wrap justify-content-center \"\n          style={{ gap: \"24px\" }}\n        >\n          <button\n            className={`doctor-user-type ${\n              selectedUserType === \"New\" ? \"selected\" : \"\"\n            }`}\n            onClick={() => handleUserTypeChange(\"New\")}\n          >\n            New\n          </button>\n          <button\n            className={`doctor-user-type ${\n              selectedUserType === \"Existing\" ? \"selected\" : \"\"\n            }`}\n            onClick={() => handleUserTypeChange(\"Existing\")}\n          >\n            Existing\n          </button>\n        </div>\n        <Button\n          onClick={handleSubmit}\n          className=\"purple-button \"\n          style={{ width: \"332px\", height: \"62px\" }}\n        >\n          Continue\n        </Button>\n      </section>\n    </>\n  );\n};\n\nexport default DoctorSelectUser;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}