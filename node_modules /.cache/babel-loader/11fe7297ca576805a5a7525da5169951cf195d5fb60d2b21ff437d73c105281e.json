{"ast":null,"code":"import{toast}from\"react-toastify\";import axios from\"../utils/axios.js\";import{parseError}from\"../utils/parseError.js\";import{Failure,loginFailure,loginStart,loginSuccess,Start,Success}from\"./authSlice.js\";const ErrorToastOptions={position:\"bottom-center\",autoClose:3000,pauseOnHover:true,draggable:true,theme:\"dark\"};const successToastOptions={position:\"top-center\",autoClose:3000,pauseOnHover:true,draggable:true,theme:\"light\"};export const login=async(dispatch,user)=>{dispatch(loginStart());const{email,password}=user;try{const{data}=await axios.post(\"/api/doctor/login\",{email,password});// console.log(data);\ntoast.success(\"Logged in Sucessfully!\",successToastOptions);dispatch(loginSuccess(data));}catch(error){const errorMessage=parseError(error);toast.error(errorMessage,ErrorToastOptions);dispatch(loginFailure(errorMessage));}};export const SendOtp=async(dispatch,email)=>{dispatch(Start());// const { email } = email;\ntry{const{data}=await axios.post(\"/api/doctor/send-forgot-password-code\",email);// console.log(data);\ntoast.success(\"OTP Sent!\",successToastOptions);dispatch(Success(data));return true;}catch(error){console.log(error);const errorMessage=parseError(error);toast.error(errorMessage,ErrorToastOptions);dispatch(Failure(errorMessage));return false;}};export const VerifyOtp=async(dispatch,_ref)=>{let{email,code}=_ref;dispatch(Start());try{const{data}=await axios.post(\"/api/doctor/validate-code\",{email,code});// console.log(data);\ntoast.success(\"Verified!\",successToastOptions);dispatch(Success(data));return true;}catch(error){// console.log(error);\nconst errorMessage=parseError(error);toast.error(errorMessage,ErrorToastOptions);dispatch(Failure(errorMessage));return false;}};export const ResetPassword=async(dispatch,_ref2)=>{let{email,newPassword,confirmPassword}=_ref2;dispatch(Start());try{const{data}=await axios.put(\"/api/doctor/reset-password\",{email,newPassword,confirmPassword});toast.success(\"Password changed successfully\",successToastOptions);dispatch(Success(data));return true;}catch(error){// console.log(error);\nconst errorMessage=parseError(error);toast.error(errorMessage,ErrorToastOptions);dispatch(Failure(errorMessage));}};export const GetProfileDetails=async dispatch=>{const email=localStorage.getItem(\"userEmail\");const token=localStorage.getItem(\"userToken\");console.log(email,token);dispatch(Start());try{const{data}=await axios.get(\"/api/doctor/get-profile\",{params:{email},// Corrected: pass email as an object\nheaders:{Authorization:\"Bearer \".concat(token)}});console.log(data);dispatch(Success(data));return data;}catch(error){console.log(error);const errorMessage=parseError(error);toast.error(errorMessage,ErrorToastOptions);dispatch(Failure(errorMessage));return false;// Return false to indicate that the request failed\n}};export const appointment=async dispatch=>{const email=localStorage.get(\"userEmail\");const token=localStorage.get(\"userToken\");dispatch(Start());try{const{data}=await axios.get(\"/api/doctor/get-profile\",{params:{email},headers:{Authorization:\"\".concat(token)}});dispatch(Success(data));return true;}catch(error){console.log(error);const errorMessage=parseError(error);toast.error(errorMessage,ErrorToastOptions);dispatch(Failure(errorMessage));}};export const VerifyAthelete=async(dispatch,_ref3)=>{let{email}=_ref3;const token=localStorage.getItem(\"userToken\");dispatch(Start());try{const{data}=await axios.post(\"/api/doctor/existing-client-verification\",{email},{headers:{Authorization:\"Bearer \".concat(token)}});dispatch(Success(data));toast.success(\"Your Athelete with this email exits!\");return true;}catch(error){console.log(error);const errorMessage=parseError(error);toast.error(errorMessage,ErrorToastOptions);dispatch(Failure(errorMessage));}};","map":{"version":3,"names":["toast","axios","parseError","Failure","loginFailure","loginStart","loginSuccess","Start","Success","ErrorToastOptions","position","autoClose","pauseOnHover","draggable","theme","successToastOptions","login","dispatch","user","email","password","data","post","success","error","errorMessage","SendOtp","console","log","VerifyOtp","_ref","code","ResetPassword","_ref2","newPassword","confirmPassword","put","GetProfileDetails","localStorage","getItem","token","get","params","headers","Authorization","concat","appointment","VerifyAthelete","_ref3"],"sources":["/Users/charupatelbaghi/ares-elite/src/features/apiCall.js"],"sourcesContent":["import { toast } from \"react-toastify\";\nimport axios from \"../utils/axios.js\";\nimport { parseError } from \"../utils/parseError.js\";\nimport {\n  Failure,\n  loginFailure,\n  loginStart,\n  loginSuccess,\n  Start,\n  Success,\n} from \"./authSlice.js\";\n\nconst ErrorToastOptions = {\n  position: \"bottom-center\",\n  autoClose: 3000,\n  pauseOnHover: true,\n  draggable: true,\n  theme: \"dark\",\n};\nconst successToastOptions = {\n  position: \"top-center\",\n  autoClose: 3000,\n  pauseOnHover: true,\n  draggable: true,\n  theme: \"light\",\n};\nexport const login = async (dispatch, user) => {\n  dispatch(loginStart());\n\n  const { email, password } = user;\n\n  try {\n    const { data } = await axios.post(\"/api/doctor/login\", { email, password });\n    // console.log(data);\n    toast.success(\"Logged in Sucessfully!\", successToastOptions);\n    dispatch(loginSuccess(data));\n  } catch (error) {\n    const errorMessage = parseError(error);\n    toast.error(errorMessage, ErrorToastOptions);\n    dispatch(loginFailure(errorMessage));\n  }\n};\nexport const SendOtp = async (dispatch, email) => {\n  dispatch(Start());\n  // const { email } = email;\n\n  try {\n    const { data } = await axios.post(\n      \"/api/doctor/send-forgot-password-code\",\n      email\n    );\n    // console.log(data);\n    toast.success(\"OTP Sent!\", successToastOptions);\n    dispatch(Success(data));\n    return true;\n  } catch (error) {\n    console.log(error);\n    const errorMessage = parseError(error);\n    toast.error(errorMessage, ErrorToastOptions);\n    dispatch(Failure(errorMessage));\n    return false;\n  }\n};\nexport const VerifyOtp = async (dispatch, { email, code }) => {\n  dispatch(Start());\n\n  try {\n    const { data } = await axios.post(\"/api/doctor/validate-code\", {\n      email,\n      code,\n    });\n    // console.log(data);\n    toast.success(\"Verified!\", successToastOptions);\n    dispatch(Success(data));\n    return true;\n  } catch (error) {\n    // console.log(error);\n    const errorMessage = parseError(error);\n    toast.error(errorMessage, ErrorToastOptions);\n    dispatch(Failure(errorMessage));\n    return false;\n  }\n};\nexport const ResetPassword = async (\n  dispatch,\n  { email, newPassword, confirmPassword }\n) => {\n  dispatch(Start());\n  try {\n    const { data } = await axios.put(\"/api/doctor/reset-password\", {\n      email,\n      newPassword,\n      confirmPassword,\n    });\n    toast.success(\"Password changed successfully\", successToastOptions);\n    dispatch(Success(data));\n    return true;\n  } catch (error) {\n    // console.log(error);\n    const errorMessage = parseError(error);\n    toast.error(errorMessage, ErrorToastOptions);\n    dispatch(Failure(errorMessage));\n  }\n};\nexport const GetProfileDetails = async (dispatch) => {\n  const email = localStorage.getItem(\"userEmail\");\n  const token = localStorage.getItem(\"userToken\");\n  console.log(email, token);\n  dispatch(Start());\n  try {\n    const { data } = await axios.get(\"/api/doctor/get-profile\", {\n      params: { email }, // Corrected: pass email as an object\n      headers: { Authorization: `Bearer ${token}` },\n    });\n    console.log(data);\n    dispatch(Success(data));\n    return data;\n  } catch (error) {\n    console.log(error);\n    const errorMessage = parseError(error);\n    toast.error(errorMessage, ErrorToastOptions);\n    dispatch(Failure(errorMessage));\n    return false; // Return false to indicate that the request failed\n  }\n};\nexport const appointment = async (dispatch) => {\n  const email = localStorage.get(\"userEmail\");\n  const token = localStorage.get(\"userToken\");\n\n  dispatch(Start());\n  try {\n    const { data } = await axios.get(\"/api/doctor/get-profile\", {\n      params: { email },\n      headers: { Authorization: `${token}` },\n    });\n    dispatch(Success(data));\n    return true;\n  } catch (error) {\n    console.log(error);\n    const errorMessage = parseError(error);\n    toast.error(errorMessage, ErrorToastOptions);\n    dispatch(Failure(errorMessage));\n  }\n};\nexport const VerifyAthelete = async (dispatch, { email }) => {\n  const token = localStorage.getItem(\"userToken\");\n\n  dispatch(Start());\n  try {\n    const { data } = await axios.post(\n      \"/api/doctor/existing-client-verification\",\n      { email },\n      {\n        headers: { Authorization: `Bearer ${token}` },\n      }\n    );\n    dispatch(Success(data));\n    toast.success(\"Your Athelete with this email exits!\");\n    return true;\n  } catch (error) {\n    console.log(error);\n    const errorMessage = parseError(error);\n    toast.error(errorMessage, ErrorToastOptions);\n    dispatch(Failure(errorMessage));\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}